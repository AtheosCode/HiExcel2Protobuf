/****************************************************************************
 * Description: 
 * 
 * Document: https://github.com/hiramtan/HiProtobuf
 * Author: hiramtan@live.com
 ****************************************************************************/

using System.Collections.Generic;
using System.IO;

namespace HiProtobuf.Lib
{
    internal class ProtoGenerater
    {
        protected string Path;
        protected string Name { get; private set; }
        protected List<VariableInfo> VariableInfos { get; private set; }

        public ProtoGenerater(string name, List<VariableInfo> infos)
        {
            Name = name;
            VariableInfos = infos;
            Directory.CreateDirectory(Settings.Export_Folder + Settings.proto_folder);
            Path = Settings.Export_Folder + Settings.proto_folder + "/" + name + ".proto";
        }

        public void Process()
        {
            var header = @"
// This is auto generated by HiProtobuf
// Support: hiramtan@live.com

// [START declaration]
syntax = ""proto3"";
package HiProtobuf;
// [END declaration]

// [START java_declaration]
option java_package = ""com.HiProtobuf.HiProtobuf"";
option java_outer_classname = ""WaitReplace1111111111111"";
// [END java_declaration]

// [START csharp_declaration]
option csharp_namespace = ""HiProtobuf""; 
// [END csharp_declaration]
";
            header = header.Replace("WaitReplace1111111111111", Name + "_classname");
            header += "message " + Name + " {";
            var sw = File.AppendText(Path);
            sw.WriteLine(header);
            sw.Close();

            string str = "";
            for (int i = 0; i < VariableInfos.Count; i++)
            {
                str += GetVariableProto(VariableInfos[i], i + 1);
            }
            str += "}";
            sw = File.AppendText(Path);
            sw.WriteLine(str);
            sw.Close();

            ProcessMap();
        }

        /// <summary>
        /// 数组用[]标识
        /// </summary>
        /// <param name="infos"></param>
        private string GetVariableProto(VariableInfo info, int index)
        {
            string str = "";
            var type = info.Type;
            if (type.Contains("[]"))//如果是数组进行转换
            {
                type = "repeated " + type.Split('[')[0];
            }
            str += "  " + type + " " + info.Name + " = " + index + ";";
            str += "\n";
            return str;
        }

        private void ProcessMap()
        {
            string str = @"
message Excel_WaitReplace1111111111111
{
    map<int32,WaitReplace22222222222222> WaitReplace3333333333333333 = 1;
}";
            str = str.Replace("WaitReplace1111111111111", Name);
            str = str.Replace("WaitReplace22222222222222", Name);
            str = str.Replace("WaitReplace3333333333333333", "Data");
            var sw = File.AppendText(Path);
            sw.WriteLine(str);
            sw.Close();
        }
    }
}
